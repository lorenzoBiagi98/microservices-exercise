spring.application.name=order-service
server.port=8081

#SPRING DATA JPA
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root1998%
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database=mysql

#EUREKA
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

#ACTUATOR
# Se impostato a true, fornisce informazioni sulla salute del circuit braker
management.health.circuitbreakers.enabled=true
# Tutti gli endpoint Actuator saranno accessibili
management.endpoint.web.exposure.include=*
# Con always verranno sempre mostrati i dettagli relativi alla salute dell' applicazione
management.endpoint.health.show-details=always

#RESILIENCE4J PROPERTIES
# Monitora lo stato del circuitBraker tramite Actuator, se impostato su "true"
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# Dimensione del buffer per gestire gli eventi
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# Utilizzo di una finestra count_based per calcolare le statistiche
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# Per le statistiche del circuit braker, considererò solo le ultime 5 chiamate
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# Sopra il 50% di errori, il circuit braker interromperà le chiamate al servizio
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# Tempo di attesa prima che il circuit braker passi da aperto a semi-aperto
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# Numero massimo di chiamate durante lo stato semi-aperto
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# Determino se il circuit braker può effettuare o meno la transizione aperto-semi-aperto automaticamente
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#RESILIENCE4J TIMEOUT PROPERTIES
# Durata massima di attesa per le operazioni relative alla chiamata a Inventory
resilience4j.timelimiter.instances.inventory.timeout-duration:3s

#RESILIENCE4J RETRY PROPERTIES
# Numero massimo di tentativi in caso di fallimento di prima chiamata
resilience4j.retry.instances.inventory.max-attemps=3
# Intervallo di tempo tra un tentativo è l' altro, in caso di prima chiamata fallita
resilience4j.retry.instances.inventory.wait-duration=5s

#ZIPKIN
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.sampler.probability=1.0

#KAFKA
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:org.example.orderservice.orderservice.event.OrderPlacedEvent

# Pattern di formattazione per i messaggi di log
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
